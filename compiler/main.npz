import std;
import iofile;

const lexerPkg = import "./lexer/lexer.npz";
const parserPkg = import "./parser/parser.npz";
const compilerPkg = import "./compiler/compiler.npz";
const dumperPkg = import "./dumper/dumper.npz";
const formatPkg = import "./util/formatting.npz";
const resPkg = import "./parser/result.npz";

func main(args) {
    if (std.length(args) == 0) {
        std.println("Expected file path.");
        return;
    }
    
    if (!iofile.fileExists(args[0])) {
        std.println("File does not exist.");
        return;
    }

    iofile.setCWD(iofile.getFileDirectory(args[0]));
    const absPath = iofile.getAbsPath(args[0]);
    const fp = iofile.openFile(args[0], "r");
    const src = iofile.readFile(fp);
    const filename = formatPkg.getFilename(args[0]);
    iofile.closeFile(fp);

    const lexer = lexerPkg.Lexer(filename, src);
    const hasError = !lexer.lex();
    if (hasError) {
        lexer.printError();
        return;
    }

    std.println("-- Lexed.");

    const parser = parserPkg.Parser(absPath, lexer.getTokens());
    const res = parser.parse();
    if (res.hasError()) {
        res.printError();
        return;
    }

    std.println("-- Parsed.");

    const compiler = compilerPkg.Compiler(absPath, compilerPkg.FuncType.SCRIPT);
    compiler.compile(res.val);
    const function = compiler.endCompiler();

    std.println("-- Compiled.");

    const dumper = dumperPkg.DumpBytes();
    dumper.dumpFunction(function);
    dumper.writeToFile(absPath + ".nux");

    std.println("-- Dumped @ '" + absPath + ".nux'.");
}

std.main(main);
