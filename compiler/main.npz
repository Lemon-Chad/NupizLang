import std;
import iofile;

const VERSION = "1.0.0b";
const OUT_VERSION = "1.0.0b";

const lexerPkg = import "./lexer/lexer.npz";
const parserPkg = import "./parser/parser.npz";
const compilerPkg = import "./compiler/compiler.npz";
const dumperPkg = import "./dumper/dumper.npz";
const formatPkg = import "./util/formatting.npz";
const resPkg = import "./parser/result.npz";

func main(args) {
    let inputFile;
    let outputFile;

    for (let i = 0; i < std.length(args); i += 2) {
        if (std.length(args[i]) != 2 || args[i][0] != "-") {
            std.println("Expected flag.");
            return;
        }

        if (i + 1 >= std.length(args)) {
            std.println("Flag has no argument.");
            return;
        }

        const flag = args[i];
        if (flag == "-c") {
            inputFile = args[i + 1];
        } else if (flag == "-o") {
            outputFile = args[i + 1];
        } else if (flag == "-v") {
            std.println(" -- jackson smith --");
            std.println("nupiz oven version " + VERSION);
            std.println("compiles to nupiz version " + OUT_VERSION);
        } else {
            std.println("Unknown flag '" + flag[1] + "'.");
            return;
        }
    }

    if (std.length(args) == 0) {
        std.println("Usage: novn [options]");
        std.println("Options:");
        std.println("  -c [target]\t\tCompile target");
        std.println("  -o [target]\t\tOutput target to file");
        std.println("  -v\t\tPrint version\n");
    }

    if (inputFile == null) {
        std.println("Expected input file path.");
        return;
    }

    if (outputFile == null) {
        std.println("Expected output file path.");
        return;
    }
    
    if (!iofile.fileExists(inputFile)) {
        std.println("File does not exist.");
        return;
    }

    const absPath = iofile.getAbsPath(inputFile);
    iofile.setCWD(iofile.getFileDirectory(inputFile));
    const fp = iofile.openFile(absPath, "r");
    const src = iofile.readFile(fp);
    const filename = formatPkg.getFilename(inputFile);
    iofile.closeFile(fp);

    const lexer = lexerPkg.Lexer(filename, src);
    const hasError = !lexer.lex();
    if (hasError) {
        lexer.printError();
        return;
    }

    const parser = parserPkg.Parser(absPath, lexer.getTokens());
    const res = parser.parse();
    if (res.hasError()) {
        res.printError();
        return;
    }

    const compiler = compilerPkg.Compiler(absPath, compilerPkg.FuncType.SCRIPT);
    compiler.compile(res.val);
    const function = compiler.endCompiler();

    const dumper = dumperPkg.DumpBytes();
    dumper.dumpFunction(function);
    dumper.writeToFile(outputFile);
}

std.main(main);
