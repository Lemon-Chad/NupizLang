import std;
import npvec;
unpack import "./node.npz";

class IfNode <- Node {
    let prv condition;
    let prv ifTrue;
    let prv ifFalse;

    build(oCondition, oTrue, oFalse) {
        condition = oCondition;
        ifTrue = oTrue;
        ifFalse = oFalse;
    }

    func getChildren() {
        if (ifFalse == null)
            return npvec.vec(condition, ifTrue);
        return npvec.vec(condition, ifTrue, ifFalse);
    }

    func def string() {
        let res = "If([" + std.asString(condition) + "] -> " +
            std.asString(ifTrue);
        if (ifFalse == null)
            return res + ")";
        return res + " Else " + std.asString(ifFalse) + ")";
    }
}

class BreakNode <- Node {
    build() {
        type = NodeType.BREAK;
    }

    func def string() {
        return "Break";
    }
}

class ContinueNode <- Node {
    build() {
        type = NodeType.CONTINUE;
    }

    func def string() {
        return "Continue";
    }
}

class WhileNode <- Node {
    let prv condition;
    let prv body;

    build(oCondition, oBody) {
        condition = oCondition;
        body = oBody;

        type = NodeType.WHILE;
    }

    func getChildren() {
        return npvec.vec(condition, body);
    }

    func def string() {
        return "While(" + std.asString(condition) + 
            " -> " + std.asString(body) + ")";
    }
}

class ForNode <- Node {
    let prv initializer;
    let prv condition;
    let prv iterator;
    let prv body;

    build(oInitializer, oCondition, oIterator, oBody) {
        initializer = oInitializer;
        condition = oCondition;
        iterator = oIterator;
        body = oBody;

        type = NodeType.FOR;
    }

    func getChildren() {
        const children = npvec.vec(body);
        if (initializer != null)
            npvec.append(children, initializer);
        if (condition != null)
            npvec.append(children, condition);
        if (iterator != null)
            npvec.append(children, iterator);
        return children;
    }

    func def string() {
        let res = "For([";

        if (initializer != null)
            res += std.asString(initializer);
        res += ";";

        if (condition != null)
            res += " " + std.asString(condition);
        res += ";";

        if (iterator != null)
            res += " " + std.asString(iterator);
        res += "] -> " + std.asString(body) + ")";
        return res;
    }
}
