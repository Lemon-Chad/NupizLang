import std;
import npvec;
unpack import "./node.npz";

class FuncType {
    const pub static FUNCTION   =   0;
    const pub static METHOD     =   1;
    const pub static BUILDER    =   2;
    const pub static SCRIPT     =   3;
}

class BodyNode <- Node {
    let prv nodes;

    build(val) {
        nodes = val;
        type = NodeType.BODY;
    }

    func getChildren() {
        return nodes;
    }

    func def string() {
        let res = "Body(\n";
        for (let i = 0; i < npvec.size(nodes); i += 1)
            res += std.asString(npvec.at(nodes, i)) + ";\n";
        res += ")";
        return res;
    }
}

class FuncNode <- Node {
    let prv args;
    let prv returnType;
    let prv body;
    let prv funcType;

    build(oArgs, oReturn, oBody, oType) {
        args = oArgs;
        returnType = oReturn;
        body = oBody;
        funcType = oType;

        type = NodeType.FUNCTION;
    }

    func getChildren() {
        return npvec.vec(body);
    }

    func pub getAsType() {
        const typeArgs = npvec.vec();
        for (let i = 0; i < npvec.size(args); i += 1)
            npvec.append(typeArgs, npvec.at(args, i).getType());
        npvec.append(typeArgs, returnType);
        return UnresolvedType(
            npvec.vec("function"),
            typeArgs,
            false
        );
    }

    func pub getFuncType() {
        return funcType;
    }

    func pub getArgs() {
        return args;
    }

    func pub getReturnType() {
        return returnType;
    }

    func pub getBody() {
        return body;
    }

    func def string() {
        let res = "Func(";
        for (let i = 0; i < npvec.size(args); i += 1)
            res += std.asString(npvec.at(args, i)) + ", ";
        if (npvec.size(args) > 0)
            res = std.slice(res, 0, -3);
        return res + ", " + std.asString(body) + ")";
    }
}

class ReturnNode <- Node {
    let prv val;

    build(oVal) {
        val = oVal;

        type = NodeType.RETURN;
    }

    func getChildren() {
        return npvec.vec(val);
    }

    func pub getValue() {
        return val;
    }

    func def string() {
        return "Return(" + std.asString(val) + ")";
    }
}
