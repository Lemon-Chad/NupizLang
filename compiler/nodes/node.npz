import npvec;

const formatPkg = import "../util/formatting.npz";

class NodeType {
    const pub static NUMBER         =    0;
    const pub static BOOLEAN        =    1;
    const pub static NULL           =    2;
    const pub static LIST           =    3;
    const pub static STRING         =    4;
    const pub static BODY           =    5;
    const pub static UNARY          =    6;
    const pub static BINARY         =    7;
    const pub static CALL           =    8;
    const pub static SET_PROPERTY   =    9;
    const pub static GET_PROPERTY   =   10;
    const pub static INVOKE         =   11;
    const pub static SET_INDEX      =   12;
    const pub static DECLARE_GLOBAL =   13;
    const pub static SET_GLOBAL     =   14;
    const pub static GET_GLOBAL     =   15;
    const pub static DECLARE_LOCAL  =   16;
    const pub static SET_LOCAL      =   17;
    const pub static GET_LOCAL      =   18;
    const pub static FUNCTION       =   19;
    const pub static RETURN         =   20;
    const pub static BREAK          =   21;
    const pub static CONTINUE       =   22;
    const pub static IF             =   23;
    const pub static WHILE          =   24;
    const pub static FOR            =   25;
    const pub static CLASS          =   26;
    const pub static IMPORT         =   27;
    const pub static SUPER          =   28;
    const pub static ATTRIBUTE      =   29;
    const pub static METHOD         =   30;
    const pub static AND            =   31;
    const pub static OR             =   32;
    const pub static IMPORT_FILE    =   33;
    const pub static SUPER_INVOKE   =   34;
    const pub static PACKAGE        =   35;
    const pub static CAST           =   36;
    const pub static DENULL         =   37;
}

class Node {
    let prv type;
    let pub filename = null;
    let pub src = null;
    let pub idx = -1;
    let pub len = -1;
    let pub emitPop = false;

    func pub getChildren() {
        return npvec.vec();
    }

    func pub getType() {
        return type;
    }

    func pub getFilename() {
        return filename;
    }

    func pub getSrc() {
        return src;
    }

    func pub getIdx() {
        return idx;
    }

    func pub getLen() {
        return len;
    }

    func pub getLine() {
        return formatPkg.idxToLine(src, idx);
    }

    func pub getEndLine() {
        return formatPkg.idxToLine(src, idx + len);
    }

    func pub setSource(filename, src, idx, len) {
        this.filename = filename;
        this.src = src;
        this.idx = idx;
        this.len = len;
        return this;
    }

    func pub tokSource(start, end) {
        filename = start.filename;
        src = start.src;
        idx = start.idx;
        len = end.idx + end.len - start.idx;
        return this;
    }
}

class PackageNode <- Node {
    let prv packagePath;
    let prv body;

    build(oPath, oBody) {
        packagePath = oPath;
        body = oBody;

        type = NodeType.PACKAGE;
    }

    func pub getBody() {
        return body;
    }

    func pub getPath() {
        return packagePath;
    }

    func def string() {
        let res = "Package('";
        for (let i = 0; i < npvec.size(packagePath); i += 1)
            res += std.asString(npvec.at(packagePath, i)) + ".";
        if (npvec.size(packagePath) > 0)
            res = std.slice(res, 0, -2);
        res += "', " + std.asString(body) + ")";
        return res;
    }
}
