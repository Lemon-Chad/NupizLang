import std;
import npvec;

const FANCY_MODE = true;

func idxToLine(src, idx) {
    return std.length(std.split(std.slice(src, 0, idx), "\n")) - 1;
}

func lineToIdx(src, line) {
    const lines = std.split(src, "\n");
    const n = std.length(lines);

    let idx = 0;
    for (let i = 0; i < line; i += 1) {
        idx += std.length(lines[i]) + 1;
    }

    return idx;
}

func findLineStart(src, idx) {
    return lineToIdx(src, idxToLine(src, idx));
}

func findLineEnd(src, idx) {
    return lineToIdx(src, idxToLine(src, idx) + 1) - 1;
}

func codeSnippet(src, idx, len) {
    return std.slice(src, findLineStart(src, idx), findLineEnd(src, idx + len));
}

func highlightBar(len) {
    if (len <= 0) return "";

    if (len >= 2) {
        if (FANCY_MODE)
            return "╰" + std.repeat("─", len - 2) + "╯";
        else
            return "\\" + std.repeat("_", len - 2) + "/";
    }

    return "^";
}

func isWhitespace(char) {
    return char == " " || char == "\t" || char == "\n" || char == "\r";
}

func getMargin(text) {
    let margin = "";
    const n = std.length(text);
    for (let i = 0; i < n && isWhitespace(text[i]); i += 1)
        margin += text[i];
    return margin;
}

func getMarginLength(text) {
    const lines = std.split(text, "\n");
    const n = std.length(lines);
    let margin = -1;
    for (let i = 0; i < n; i += 1) {
        const line = lines[i];
        const currentMargin = std.length(getMargin(line));
        
        if (margin == -1 || (currentMargin < margin 
                && currentMargin < std.length(line)))
            margin = currentMargin;
    }

    return margin;
}

func leftAlign(text) {
    const lines = std.split(text, "\n");
    const n = std.length(lines);
    let margin = getMarginLength(text);

    let res = "";
    for (let i = 0; i < n; i += 1)
        res += std.slice(lines[i], margin, -1) + "\n";
    
    return std.slice(res, 0, -2);
}

func numberSnippetLines(src, start) {
    const lines = std.split(src, "\n");
    const n = std.length(lines);
    const numLength = std.length(std.asString(start + n));
    
    let res = "";
    for (let i = 0; i < n; i += 1)
        res += std.repeat(" ", numLength - std.length(std.asString(i + start))) + 
            std.asString(i + start) + ":: " + lines[i] + "\n";
    return std.slice(res, 0, -2);
}

func addMargin(src, margin) {
    const lines = std.split(src, "\n");
    const n = std.length(lines);
    
    let res = "";
    for (let i = 0; i < n; i += 1)
        res += margin + lines[i] + "\n";
    return std.slice(res, 0, -2);
}

func underlineCode(src, idx, len) {
    const start = findLineStart(src, idx);
    const end = findLineEnd(src, idx + len);
    const snippet = codeSnippet(src, idx, len);
    const lineNo = idxToLine(src, idx) + 1;

    const lines = std.split(snippet, "\n");
    const n = std.length(lines);
    const numLength = std.length(std.asString(lineNo + n - 1));

    if (n == 1) {
        const line = lines[0];
        const margin = getMargin(line);
        const marginLength = std.length(margin);

        return std.asString(lineNo) + ":: " + std.slice(line, marginLength, -1) + "\n"
            + std.repeat(" ", numLength + 3 + idx - start) + 
            highlightBar(len);
    }

    const marginLength = getMarginLength(snippet);

    let res = "";
    let j = start;
    for (let i = 0; i < n; i += 1) {
        const line = std.slice(lines[i], marginLength, -1);
        const lineLength = std.length(line);
        const margin = getMargin(line);
        const lineMargin = std.length(margin);

        res += std.repeat(" ", numLength - std.length(std.asString(lineNo + i))) +
                std.asString(lineNo + i) + ":: " + line + "\n" + 
                std.repeat(" ", numLength + 3) + margin;
        if (j + lineMargin + marginLength < idx) {
            res += std.repeat(" ", idx - (j + lineMargin + marginLength)) +
                highlightBar(j + lineLength + marginLength - idx);
        } else if (j + lineLength + marginLength > idx + len) {
            res += highlightBar(idx + len - (j + lineMargin + marginLength));
        } else {
            res += highlightBar(lineLength - lineMargin);
        }

        res += "\n";
        j += lineLength + 1;
    }

    return std.slice(res, 0, -2);
}

func getFilename(path) {
    return std.split(path, "/")[-1];
}